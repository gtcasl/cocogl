//
// Copyright (c) Blaise Tine.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools
// installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR
// INDEMNITIES.
//
#include "stdafx.h"
#include "raster.hpp"
#include "rasterop.hpp"
#include "rasterop_opt.hpp"
#include "rasterop_opt.inl"

#define MAKE_SCANLINE(flags, states, texture0, texture1)                       \
  {                                                                            \
    RASTERID(flags, states, texture0, texture1)                                \
    , TOptimizedScanline<flags, states, texture0, texture1>::Execute           \
  }


static const struct ScanlineRasterID {
  RASTERID RasterID;
  PFN_Scanline pfnScanline;
}

l_optimizedScanlines[] = {
    MAKE_SCANLINE(0, 0, 0, 0),

    MAKE_SCANLINE(65667079, 1, 0, 0),
    MAKE_SCANLINE(65667103, 1, 1051668, 0),
    MAKE_SCANLINE(65667095, 1, 1051668, 0),
    MAKE_SCANLINE(15335467, 1, 1050964, 1051668),
    MAKE_SCANLINE(57278743, 137, 1050644, 0),
    MAKE_SCANLINE(131348, 672, 265236, 0),
    MAKE_SCANLINE(131348, 672, 1051668, 0),
    // MAKE_SCANLINE(65667119,1,1051988,1051668), // crash!! -loop optimization

    /*MAKE_SCANLINE(15335447,1,1051668,0),
    MAKE_SCANLINE(32112663,1,1051668,0),
    MAKE_SCANLINE(6947095,137,1050644,0),
    MAKE_SCANLINE(15335431,1,0,0),
    MAKE_SCANLINE(32112671,1,1051668,0),
    MAKE_SCANLINE(15335455,1,1051668,0),
    MAKE_SCANLINE(15335471,1,1051988,1051668),  // JIT bug!!!
    MAKE_SCANLINE(15335467,1,1050964,1051668),
    MAKE_SCANLINE(32112671,3,1051668,0),
    MAKE_SCANLINE(15335455,3,1051668,0),
    MAKE_SCANLINE(32112663,3,1051668,0),
    MAKE_SCANLINE(15335447,3,1051668,0),
    MAKE_SCANLINE(15335707,675,1312788,0),
    MAKE_SCANLINE(15335471,3,1051668,1051668),
    MAKE_SCANLINE(131348,672,265236,0),
    MAKE_SCANLINE(131348,672,1051668,0),
    MAKE_SCANLINE(6946863,3,1051668,1051668),*/

    /*// MD2Viewer
    MAKE_SCANLINE(15335431,1,0,0),
    MAKE_SCANLINE(32112671,1,1051668,0),
    MAKE_SCANLINE(15335455,1,1051668,0),
    MAKE_SCANLINE(15335447,1,1051668,0),
    MAKE_SCANLINE(32112663,1,1051668,0),
    MAKE_SCANLINE(15335471,1,1051988,1051668),
    MAKE_SCANLINE(15335467,1,1050964,1051668),
    MAKE_SCANLINE(6947095,137,1050644,0),
    MAKE_SCANLINE(131348,672,265236,0),
    MAKE_SCANLINE(131348,672,1051668,0),
    MAKE_SCANLINE(6946823,1,0,0),
    MAKE_SCANLINE(131096,0,1050644,0),
    MAKE_SCANLINE(131088,0,1050664,0),
    MAKE_SCANLINE(131160,0,1050666,0),
    MAKE_SCANLINE(23724127,3,1051690,0),
    MAKE_SCANLINE(15335443,3,1050644,0),
    MAKE_SCANLINE(15335451,3,1050644,0),

    MAKE_SCANLINE(15335431,1,0,0),
    MAKE_SCANLINE(32112671,1,1051668,0),
    MAKE_SCANLINE(15335455,1,1051668,0),
    MAKE_SCANLINE(15335447,1,1051668,0),
    MAKE_SCANLINE(32112663,1,1051668,0),
    MAKE_SCANLINE(15335471,1,1051988,1051668),
    MAKE_SCANLINE(15335467,1,1050964,1051668),
    MAKE_SCANLINE(6947095,137,1050644,0),
    MAKE_SCANLINE(131088,0,1050644,0),
    MAKE_SCANLINE(15335705,673,1312808,0),
    MAKE_SCANLINE(6946835,1,1050664,0),
    MAKE_SCANLINE(15335697,673,1312808,0),
    MAKE_SCANLINE(131152,0,1050665,0),
    MAKE_SCANLINE(131152,0,1050662,0),
    MAKE_SCANLINE(131152,0,1050666,0),
    MAKE_SCANLINE(67240024,0,1050661,0),
    MAKE_SCANLINE(67240024,0,1050662,0),
    MAKE_SCANLINE(67240024,0,1050666,0),
    MAKE_SCANLINE(99221599,3,1051690,0),
    MAKE_SCANLINE(16908292,0,0,0),
    MAKE_SCANLINE(23724119,1,1051690,0),
    MAKE_SCANLINE(6946911,1,1051690,0),
    MAKE_SCANLINE(23724127,1,1051690,0),
    MAKE_SCANLINE(90832991,1,1051690,0),
    MAKE_SCANLINE(32112735,1,1051690,0),
    MAKE_SCANLINE(74055775,1,1051690,0),
    MAKE_SCANLINE(32112727,1,1051690,0),
    MAKE_SCANLINE(99221599,1,1051690,0),
    MAKE_SCANLINE(6946903,1,1051690,0),
    MAKE_SCANLINE(32112671,1,1051688,0),
    MAKE_SCANLINE(82444383,1,1051690,0),
    MAKE_SCANLINE(23724063,1,1051688,0),
    MAKE_SCANLINE(6946847,1,1051688,0),
    MAKE_SCANLINE(6946839,1,1051688,0),
    MAKE_SCANLINE(15335455,1,1051688,0),
    MAKE_SCANLINE(23724055,1,1051688,0),
    MAKE_SCANLINE(32112663,1,1051688,0),
    MAKE_SCANLINE(15335963,12289,1312808,0),
    MAKE_SCANLINE(15336027,12289,1312810,0),
    MAKE_SCANLINE(6947419,12289,1312810,0),
    MAKE_SCANLINE(15335511,1,1051690,0),
    MAKE_SCANLINE(15335447,1,1051688,0),
    MAKE_SCANLINE(15335519,1,1051690,0),
    MAKE_SCANLINE(82444891,12289,1312810,0),
    MAKE_SCANLINE(131076,0,0,0),
    MAKE_SCANLINE(15336031,12289,1313834,0),
    MAKE_SCANLINE(82444895,12289,1313834,0),
    MAKE_SCANLINE(32113247,12289,1313834,0),
    MAKE_SCANLINE(99222111,12289,1313834,0),
    MAKE_SCANLINE(32113183,12289,1313832,0),
    MAKE_SCANLINE(15335967,12289,1313832,0),
    MAKE_SCANLINE(57278725,673,0,0),
    MAKE_SCANLINE(15335451,1,1050664,0),
    MAKE_SCANLINE(15336023,12289,1313834,0),
    MAKE_SCANLINE(32113175,12289,1313832,0),
    MAKE_SCANLINE(131088,0,1050664,0),
    MAKE_SCANLINE(82444379,1,1050660,0),
    MAKE_SCANLINE(15335451,1,1050644,0),
    MAKE_SCANLINE(15335515,1,1050660,0),
    MAKE_SCANLINE(15335443,1,1050644,0),
    MAKE_SCANLINE(74055771,1,1050660,0),
    MAKE_SCANLINE(6946907,1,1050660,0),
    MAKE_SCANLINE(6946843,1,1050644,0),
    MAKE_SCANLINE(6947091,673,1312788,0),
    MAKE_SCANLINE(15335699,673,1312788,0),
    MAKE_SCANLINE(82444635,673,1312804,0),
    MAKE_SCANLINE(6947099,673,1312788,0),
    MAKE_SCANLINE(15335763,673,1312804,0),
    MAKE_SCANLINE(74056027,673,1312804,0),
    MAKE_SCANLINE(15335771,673,1312804,0),
    MAKE_SCANLINE(6947163,673,1312804,0),
    MAKE_SCANLINE(6947155,673,1312804,0),
    MAKE_SCANLINE(15335707,673,1312788,0),
    MAKE_SCANLINE(82444379,1,1050665,0),
    MAKE_SCANLINE(15335515,1,1050665,0),
    MAKE_SCANLINE(6946843,1,1050664,0),
    MAKE_SCANLINE(74055771,1,1050665,0),
    MAKE_SCANLINE(6946907,1,1050665,0),
    MAKE_SCANLINE(15335763,673,1312809,0),
    MAKE_SCANLINE(82444635,673,1312809,0),
    MAKE_SCANLINE(74056027,673,1312809,0),
    MAKE_SCANLINE(6947155,673,1312809,0),
    MAKE_SCANLINE(6947091,673,1312808,0),
    MAKE_SCANLINE(15335699,673,1312808,0),
    MAKE_SCANLINE(15335707,673,1312808,0),
    MAKE_SCANLINE(15335771,673,1312809,0),
    MAKE_SCANLINE(6947099,673,1312808,0),
    MAKE_SCANLINE(6947163,673,1312809,0),
    MAKE_SCANLINE(82444379,1,1050666,0),
    MAKE_SCANLINE(15335443,1,1050664,0),
    MAKE_SCANLINE(15335515,1,1050666,0),
    MAKE_SCANLINE(74055771,1,1050666,0),
    MAKE_SCANLINE(6946907,1,1050666,0),
    MAKE_SCANLINE(15335763,673,1312810,0),
    MAKE_SCANLINE(82444635,673,1312810,0),
    MAKE_SCANLINE(74056027,673,1312810,0),
    MAKE_SCANLINE(6947155,673,1312810,0),
    MAKE_SCANLINE(15335771,673,1312810,0),
    MAKE_SCANLINE(6947163,673,1312810,0),
    MAKE_SCANLINE(131348,672,265236,0),
    MAKE_SCANLINE(131348,672,1051668,0),

    MAKE_SCANLINE(90833503,12289,1313834,0),
    MAKE_SCANLINE(6947415,12289,1313834,0),
    MAKE_SCANLINE(32113239,12289,1313834,0),
    MAKE_SCANLINE(23724631,12289,1313834,0),
    MAKE_SCANLINE(23724639,12289,1313834,0),
    MAKE_SCANLINE(15335959,12289,1313832,0),
    MAKE_SCANLINE(131096,0,1312788,0),
    MAKE_SCANLINE(131088,0,1312808,0),
    MAKE_SCANLINE(131088,0,1312788,0),
    MAKE_SCANLINE(131152,0,1312810,0),
    MAKE_SCANLINE(6946823,1,0,0),
    MAKE_SCANLINE(6946823,3,0,0),
    MAKE_SCANLINE(131348,160,1050644,0),
    MAKE_SCANLINE(131364,160,1050644,1048596),
    MAKE_SCANLINE(23724039,1,0,0),
    MAKE_SCANLINE(32112647,1,0,0),
    MAKE_SCANLINE(6946835,1,1050644,0),
    MAKE_SCANLINE(15335507,1,1050645,0),
    MAKE_SCANLINE(6946899,1,1050645,0),
    MAKE_SCANLINE(15335507,1,1050646,0),
    MAKE_SCANLINE(6946899,1,1050646,0),
    MAKE_SCANLINE(15335507,1,1050665,0),
    MAKE_SCANLINE(6946899,1,1050665,0),
    MAKE_SCANLINE(15335507,1,1050666,0),
    MAKE_SCANLINE(6946899,1,1050666,0),
    MAKE_SCANLINE(57278471,1,0,0),
    MAKE_SCANLINE(65667079,1,0,0),
    MAKE_SCANLINE(57278495,1,1051668,0),
    MAKE_SCANLINE(65667103,1,1051668,0),
    MAKE_SCANLINE(65667095,1,1051668,0),
    MAKE_SCANLINE(57278487,1,1051668,0),
    MAKE_SCANLINE(23724055,1,1051668,0),
    MAKE_SCANLINE(131096,0,1050664,0),
    MAKE_SCANLINE(16908308,0,1051668,0),
    MAKE_SCANLINE(16908308,0,1051688,0),
    MAKE_SCANLINE(16908316,0,1051668,0),
    MAKE_SCANLINE(16908316,0,1051688,0),*/
};


COptimizedRasterOp::COptimizedRasterOp(PFN_Scanline pfnScanline) {
  __profileAPI(_T(" - %s()\n"), _T(__FUNCTION__));
  m_pfnScanline = pfnScanline;
}


COptimizedRasterOp::~COptimizedRasterOp() {
  __profileAPI(_T(" - %s()\n"), _T(__FUNCTION__));
}


GLenum COptimizedRasterOp::Create(IRasterOp **ppRasterOp,
                                  const RASTERID &rasterID) {
  __profileAPI(_T(" - %s()\n"), _T(__FUNCTION__));

  ASSERT(ppRasterOp);

  // First lookup the optimized scanline table
  for (unsigned i = 0; i < __countof(l_optimizedScanlines); ++i) {
    if (l_optimizedScanlines[i].RasterID == rasterID) {
      // Create an optimized rasterOp object
      COptimizedRasterOp *const pRasterOp =
          new COptimizedRasterOp(l_optimizedScanlines[i].pfnScanline);
      if (NULL == pRasterOp) {
        __glLogError(
            _T("COptimizedRasterOp allocation failed, out of memory.\r\n"));
        return GL_OUT_OF_MEMORY;
      }

      pRasterOp->AddRef();
      *ppRasterOp = pRasterOp;
      return GL_NO_ERROR;
    }
  }

  return __GL_NO_DATA;
}